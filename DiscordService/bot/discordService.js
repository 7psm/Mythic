/**
 * BOT DISCORD.JS - Configuration Compl√®te
 * Structure de projet pour notifications de commandes
 */

// ============================================
// 1. INSTALLATION ET D√âPENDANCES
// ============================================

/*
npm init -y
npm install discord.js@14.14.1
npm install dotenv express cors
npm install axios node-cron

Structure des dossiers:
project/
‚îú‚îÄ‚îÄ bot/
‚îÇ   ‚îú‚îÄ‚îÄ index.js          (fichier principal du bot)
‚îÇ   ‚îú‚îÄ‚îÄ commands/         (commandes Discord)
‚îÇ   ‚îú‚îÄ‚îÄ events/          (√©v√©nements Discord)
‚îÇ   ‚îú‚îÄ‚îÄ utils/           (utilitaires)
‚îÇ   ‚îî‚îÄ‚îÄ embeds/          (templates d'embeds)
‚îú‚îÄ‚îÄ api/
‚îÇ   ‚îú‚îÄ‚îÄ server.js        (serveur API pour webhook)
‚îÇ   ‚îî‚îÄ‚îÄ routes/          (routes API)
‚îú‚îÄ‚îÄ web/
‚îÇ   ‚îî‚îÄ‚îÄ discord-client.js (script c√¥t√© client)
‚îú‚îÄ‚îÄ .env                 (variables d'environnement)
‚îî‚îÄ‚îÄ package.json
*/

// ============================================
// 2. FICHIER PRINCIPAL DU BOT (bot/index.js)
// ============================================

const { Client, GatewayIntentBits, EmbedBuilder, PermissionFlagsBits } = require('discord.js');
require('dotenv').config();

class IncognitoBotMarket {
  constructor() {
    this.client = new Client({
      intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.DirectMessages,
        GatewayIntentBits.GuildMembers
      ]
    });
    
    this.config = {
      token: process.env.DISCORD_BOT_TOKEN,
      guildId: process.env.DISCORD_GUILD_ID,
      channelId: process.env.DISCORD_CHANNEL_ID,
      adminRoleId: process.env.ADMIN_ROLE_ID,
      logChannelId: process.env.LOG_CHANNEL_ID
    };
    
    this.initializeBot();
  }

  async initializeBot() {
    try {
      // √âv√©nement : Bot pr√™t
      this.client.once('ready', () => {
        console.log(`ü§ñ Bot ${this.client.user.tag} est connect√© !`);
        console.log(`üìä Pr√©sent sur ${this.client.guilds.cache.size} serveur(s)`);
        
        // Statut du bot
        this.client.user.setActivity('üõí Nouvelles commandes', { type: 'WATCHING' });
      });

      // √âv√©nement : Erreurs
      this.client.on('error', (error) => {
        console.error('‚ùå Erreur Discord:', error);
      });

      // Connexion du bot
      await this.client.login(this.config.token);
      
    } catch (error) {
      console.error('‚ùå Erreur d\'initialisation du bot:', error);
      process.exit(1);
    }
  }

  /**
   * Trouve un utilisateur par son pseudo Discord
   * @param {string} username - Pseudo Discord (avec ou sans @)
   * @returns {Promise<User|null>} - Utilisateur Discord ou null
   */
  async trouverUtilisateurParPseudo(username) {
    try {
      // Nettoyer le pseudo
      const pseudoNettoye = username.replace(/[@#]/g, '').toLowerCase();
      
      // R√©cup√©rer la guilde
      const guild = this.client.guilds.cache.get(this.config.guildId);
      if (!guild) {
        console.error('‚ùå Serveur Discord introuvable');
        return null;
      }

      // Chercher dans le cache des membres
      await guild.members.fetch();
      const membre = guild.members.cache.find(m => 
        m.user.username.toLowerCase() === pseudoNettoye ||
        m.displayName.toLowerCase() === pseudoNettoye ||
        m.user.globalName?.toLowerCase() === pseudoNettoye
      );

      if (membre) {
        console.log(`‚úÖ Utilisateur trouv√©: ${membre.user.tag}`);
        return membre.user;
      }

      // Recherche alternative par tag complet (username#discriminator)
      if (pseudoNettoye.includes('#')) {
        const utilisateur = this.client.users.cache.find(u => 
          u.tag.toLowerCase() === pseudoNettoye
        );
        if (utilisateur) return utilisateur;
      }

      console.warn(`‚ö†Ô∏è Utilisateur introuvable: ${username}`);
      return null;
      
    } catch (error) {
      console.error('‚ùå Erreur recherche utilisateur:', error);
      return null;
    }
  }

  /**
   * Cr√©e un embed de confirmation pour le client
   * @param {Object} donneesCommande - Donn√©es de la commande
   * @returns {EmbedBuilder} - Embed de confirmation
   */
  creerEmbedConfirmationClient(donneesCommande) {
    const sousTotal = donneesCommande.articles.reduce((total, article) => 
      total + (article.prix * article.quantite), 0
    );
    const total = sousTotal + (donneesCommande.fraisLivraison || 0);

    return new EmbedBuilder()
      .setTitle('‚úÖ Confirmation de votre commande')
      .setDescription(`Bonjour **${donneesCommande.nom}** !\n\nVotre commande **${donneesCommande.numeroCommande}** a √©t√© re√ßue avec succ√®s.`)
      .setColor(0x00ff00)
      .addFields(
        {
          name: 'üì¶ Articles Command√©s',
          value: donneesCommande.articles.map(article => 
            `‚Ä¢ **${article.nom}** x${article.quantite} - ‚Ç¨${(article.prix * article.quantite).toFixed(2)}`
          ).join('\n') || 'Aucun article',
          inline: false
        },
        {
          name: 'üöö Livraison',
          value: `**${donneesCommande.methodeLivraison}**\nD√©lai: ${donneesCommande.delaiLivraison}\nCo√ªt: ${donneesCommande.fraisLivraison === 0 ? 'GRATUIT' : '‚Ç¨' + donneesCommande.fraisLivraison.toFixed(2)}`,
          inline: true
        },
        {
          name: 'üí∞ Total',
          value: `**‚Ç¨${total.toFixed(2)}**\nPaiement: ${donneesCommande.methodePaiement}`,
          inline: true
        },
        {
          name: 'üìû Support',
          value: 'Si vous avez des questions :\n‚Ä¢ R√©pondez √† ce message\n‚Ä¢ Contactez @MolarMarket',
          inline: false
        }
      )
      .setFooter({ 
        text: 'IncognitoMarket ‚Ä¢ Merci pour votre confiance',
        iconURL: this.client.user.displayAvatarURL()
      })
      .setTimestamp();
  }

  /**
   * Cr√©e un embed de notification pour les admins
   * @param {Object} donneesCommande - Donn√©es de la commande
   * @returns {EmbedBuilder} - Embed admin
   */
  creerEmbedNotificationAdmin(donneesCommande) {
    const sousTotal = donneesCommande.articles.reduce((total, article) => 
      total + (article.prix * article.quantite), 0
    );
    const total = sousTotal + (donneesCommande.fraisLivraison || 0);

    return new EmbedBuilder()
      .setTitle('üõí Nouvelle commande re√ßue')
      .setDescription(`**Commande n¬∞:** ${donneesCommande.numeroCommande}\n**Client:** ${donneesCommande.nom}`)
      .setColor(0x0099ff)
      .addFields(
        {
          name: 'üë§ Informations Client',
          value: `**Nom:** ${donneesCommande.nom}\n**Email:** ${donneesCommande.email}\n**Discord:** ${donneesCommande.pseudoDiscord}\n**T√©l√©phone:** ${donneesCommande.telephone || 'Non renseign√©'}`,
          inline: true
        },
        {
          name: 'üìç Adresse de Livraison',
          value: `${donneesCommande.adresse}\n${donneesCommande.ville} ${donneesCommande.codePostal}\n${donneesCommande.pays}`,
          inline: true
        },
        {
          name: 'üì¶ Articles',
          value: donneesCommande.articles.map(article => 
            `‚Ä¢ ${article.nom} x${article.quantite} - ‚Ç¨${(article.prix * article.quantite).toFixed(2)}`
          ).join('\n'),
          inline: false
        },
        {
          name: 'üí∞ R√©sum√© Financier',
          value: `**Sous-total:** ‚Ç¨${sousTotal.toFixed(2)}\n**Livraison:** ${donneesCommande.fraisLivraison === 0 ? 'GRATUIT' : '‚Ç¨' + donneesCommande.fraisLivraison.toFixed(2)}\n**Total:** ‚Ç¨${total.toFixed(2)}\n**Paiement:** ${donneesCommande.methodePaiement}`,
          inline: false
        },
        {
          name: '‚è∞ Informations',
          value: `**Date:** ${new Date().toLocaleString('fr-FR')}\n**Statut:** üü° En attente de traitement`,
          inline: true
        }
      )
      .setFooter({ 
        text: 'IncognitoMarket ‚Ä¢ Syst√®me de commandes automatique',
        iconURL: this.client.user.displayAvatarURL()
      })
      .setTimestamp();
  }

  /**
   * Envoie un message priv√© au client
   * @param {Object} donneesCommande - Donn√©es de la commande
   * @returns {Promise<boolean>} - Succ√®s de l'envoi
   */
  async envoyerConfirmationClient(donneesCommande) {
    try {
      const utilisateur = await this.trouverUtilisateurParPseudo(donneesCommande.pseudoDiscord);
      
      if (!utilisateur) {
        console.warn(`‚ö†Ô∏è Impossible d'envoyer la confirmation √† ${donneesCommande.pseudoDiscord}`);
        return false;
      }

      const embed = this.creerEmbedConfirmationClient(donneesCommande);
      
      await utilisateur.send({ embeds: [embed] });
      console.log(`‚úÖ Confirmation envoy√©e √† ${utilisateur.tag}`);
      
      return true;
      
    } catch (error) {
      console.error('‚ùå Erreur envoi confirmation client:', error);
      
      // Log l'erreur dans le canal admin
      await this.logErreur(`Impossible d'envoyer la confirmation √† ${donneesCommande.pseudoDiscord}: ${error.message}`);
      
      return false;
    }
  }

  /**
   * Envoie la notification dans le canal admin
   * @param {Object} donneesCommande - Donn√©es de la commande
   * @returns {Promise<boolean>} - Succ√®s de l'envoi
   */
  async envoyerNotificationAdmin(donneesCommande) {
    try {
      const canal = this.client.channels.cache.get(this.config.channelId);
      
      if (!canal) {
        console.error('‚ùå Canal de notification introuvable');
        return false;
      }

      const embed = this.creerEmbedNotificationAdmin(donneesCommande);
      
      // Ajouter des boutons d'action (optionnel)
      const message = await canal.send({ 
        embeds: [embed],
        content: `<@&${this.config.adminRoleId}> Nouvelle commande !` // Ping des admins
      });

      // R√©action rapide pour marquer comme trait√©
      await message.react('‚úÖ');
      await message.react('‚ùå');
      
      console.log(`‚úÖ Notification admin envoy√©e dans ${canal.name}`);
      
      return true;
      
    } catch (error) {
      console.error('‚ùå Erreur envoi notification admin:', error);
      return false;
    }
  }

  /**
   * Traite une nouvelle commande (fonction principale)
   * @param {Object} donneesCommande - Donn√©es de la commande
   * @returns {Promise<Object>} - R√©sultats des envois
   */
  async traiterNouvelleCommande(donneesCommande) {
    console.log(`üîÑ Traitement de la commande ${donneesCommande.numeroCommande}...`);
    
    try {
      // Envoyer les notifications en parall√®le
      const [confirmationClient, notificationAdmin] = await Promise.allSettled([
        this.envoyerConfirmationClient(donneesCommande),
        this.envoyerNotificationAdmin(donneesCommande)
      ]);

      const resultats = {
        confirmationClient: confirmationClient.status === 'fulfilled' ? confirmationClient.value : false,
        notificationAdmin: notificationAdmin.status === 'fulfilled' ? notificationAdmin.value : false,
        numeroCommande: donneesCommande.numeroCommande,
        timestamp: new Date().toISOString()
      };

      // Log du r√©sultat
      const statut = resultats.confirmationClient && resultats.notificationAdmin ? '‚úÖ Succ√®s' : '‚ö†Ô∏è Partiel';
      console.log(`${statut} - Commande ${donneesCommande.numeroCommande}:`, resultats);

      // Log dans le canal de logs
      await this.logActivite(`Commande ${donneesCommande.numeroCommande} trait√©e - Client: ${resultats.confirmationClient ? '‚úÖ' : '‚ùå'} | Admin: ${resultats.notificationAdmin ? '‚úÖ' : '‚ùå'}`);

      return resultats;
      
    } catch (error) {
      console.error('‚ùå Erreur traitement commande:', error);
      
      await this.logErreur(`Erreur traitement commande ${donneesCommande.numeroCommande}: ${error.message}`);
      
      return {
        confirmationClient: false,
        notificationAdmin: false,
        numeroCommande: donneesCommande.numeroCommande,
        error: error.message,
        timestamp: new Date().toISOString()
      };
    }
  }

  /**
   * Log une activit√© dans le canal de logs
   * @param {string} message - Message √† logger
   */
  async logActivite(message) {
    try {
      if (!this.config.logChannelId) return;
      
      const canalLog = this.client.channels.cache.get(this.config.logChannelId);
      if (!canalLog) return;

      const embed = new EmbedBuilder()
        .setColor(0x00ff00)
        .setTitle('üìä Activit√© Bot')
        .setDescription(message)
        .setTimestamp();

      await canalLog.send({ embeds: [embed] });
      
    } catch (error) {
      console.error('‚ùå Erreur log activit√©:', error);
    }
  }

  /**
   * Log une erreur dans le canal de logs
   * @param {string} erreur - Message d'erreur
   */
  async logErreur(erreur) {
    try {
      if (!this.config.logChannelId) return;
      
      const canalLog = this.client.channels.cache.get(this.config.logChannelId);
      if (!canalLog) return;

      const embed = new EmbedBuilder()
        .setColor(0xff0000)
        .setTitle('‚ùå Erreur Bot')
        .setDescription(erreur)
        .setTimestamp();

      await canalLog.send({ embeds: [embed] });
      
    } catch (error) {
      console.error('‚ùå Erreur log erreur:', error);
    }
  }

  /**
   * Obtient les statistiques du bot
   * @returns {Object} - Statistiques
   */
  getStats() {
    return {
      uptime: process.uptime(),
      guilds: this.client.guilds.cache.size,
      users: this.client.users.cache.size,
      channels: this.client.channels.cache.size,
      ping: this.client.ws.ping
    };
  }
}

// ============================================
// 3. INITIALISATION ET EXPORT
// ============================================

// Instance du bot
const bot = new IncognitoBotMarket();

// Gestion propre de l'arr√™t
process.on('SIGINT', () => {
  console.log('üõë Arr√™t du bot...');
  bot.client.destroy();
  process.exit(0);
});

// Export pour utilisation dans l'API
module.exports = bot;
